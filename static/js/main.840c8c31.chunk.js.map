{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","videoRef","useRef","handlePicInPic","a","current","document","pictureInPictureEnabled","disablePictureInPicture","isPicInPic","pictureInPictureElement","requestPictureInPicture","exitPictureInPicture","console","log","alert","className","controls","preload","ref","src","type","onClick","fullscreenElement","webkitFullscreenElement","exitFullscreen","webkitExitFullscreen","requestFullscreen","webkitRequestFullscreen","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kQAgFeA,EA7EH,WACV,IAAMC,EAAWC,iBAAO,MAyBlBC,EAAc,uCAAG,4BAAAC,EAAA,0DACjBH,IAAYA,EAASI,QADJ,sBAESC,SAASC,0BAA4BN,EAASI,QAAQG,yBAF/D,oBAIXC,GAAcH,SAASI,wBAJZ,UAMXD,EANW,iCAOPR,EAASI,QAAQM,0BAPV,gDASPL,SAASM,uBATF,0DAYfC,QAAQC,IAAR,MAZe,gCAejBC,MAAM,8EAfW,0DAAH,qDAoBpB,OACE,sBAAKC,UAAU,UAAf,UAEE,qBAAKA,UAAU,gBAAf,SACE,wBAAOC,UAAQ,EAACC,QAAQ,OAAOC,IAAKlB,EAApC,UACE,wBACEmB,IAAI,6FACJC,KAAK,cAHT,sFASF,sBAAKL,UAAU,WAAf,6CACkC,uBAChC,wBAAQM,QA1DW,WACnBrB,GAAYA,EAASI,UACAC,SAASiB,mBAAqBjB,SAASkB,wBAUxDlB,SAASmB,eACXnB,SAASmB,iBACAnB,SAASoB,qBAClBpB,SAASoB,uBAETX,MAAM,mCAbJd,EAASI,QAAQsB,kBACnB1B,EAASI,QAAQsB,oBACR1B,EAASI,QAAQuB,wBAC1B3B,EAASI,QAAQuB,0BAEjBb,MAAM,qCAiDR,gCACA,wBAAQO,QAASnB,EAAjB,8CAGF,qBAAKa,UAAU,iBAAf,SACE,6CACE,mBAAGa,KAAK,iCAAiCC,OAAO,SAASC,IAAI,aAA7D,yBADF,iBAGE,mBAAGF,KAAK,wEAAwEC,OAAO,SAASC,IAAI,aAApG,6BC5DKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrC,SAASsC,eAAe,SAM1BZ,M","file":"static/js/main.840c8c31.chunk.js","sourcesContent":["import { useRef } from 'react';\nimport './App.css';\n\nconst App = () => {\n  const videoRef = useRef(null);\n\n  const handleFullScreen = () => {\n    if (videoRef && videoRef.current) {\n      const isFullScreened = document.fullscreenElement || document.webkitFullscreenElement;\n      if (!isFullScreened) {\n        if (videoRef.current.requestFullscreen) {\n          videoRef.current.requestFullscreen();\n        } else if (videoRef.current.webkitRequestFullscreen) {\n          videoRef.current.webkitRequestFullscreen();\n        } else {\n          alert('FullScreen API is not supported');\n        }\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        } else if (document.webkitExitFullscreen) {\n          document.webkitExitFullscreen();\n        } else {\n          alert('FullScreen API is not supported');\n        }\n      }\n    }\n  }\n\n  const handlePicInPic = async () => {\n    if (videoRef && videoRef.current) {\n      const isPicInPicAvailable = document.pictureInPictureEnabled || !videoRef.current.disablePictureInPicture;\n      if (isPicInPicAvailable) {\n        const isPicInPic = !document.pictureInPictureElement;\n        try {\n          if (isPicInPic) {\n            await videoRef.current.requestPictureInPicture();\n          } else {\n            await document.exitPictureInPicture();\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      } else {\n        alert('Either Picture in picture is not supported or it is disabled for the video');\n      }\n    }\n  }\n\n  return (\n    <div className=\"wrapper\">\n\n      <div className=\"video-wrapper\">\n        <video controls preload=\"auto\" ref={videoRef}>\n          <source\n            src=\"https://assets.mixkit.co/videos/preview/mixkit-forest-stream-in-the-sunlight-529-large.mp4\"\n            type=\"video/mp4\"\n          ></source>\n          Your browser does not support HTML5 Video. Please try with a different browser\n        </video>\n      </div >\n\n      <div className=\"controls\">\n        Custom Control Implmentation of <br />\n        <button onClick={handleFullScreen}>Toggle Full Screen</button>\n        <button onClick={handlePicInPic}>Toggle Picure In Picture View</button>\n      </div>\n\n      <div className=\"credit-wrapper\">\n        <code>Video by:\n          <a href=\"https://mixkit.co/@marcolopez/\" target=\"_blank\" rel=\"noreferrer\">Marco Lopez</a>\n          and hosted on:\n          <a href=\"https://mixkit.co/free-stock-video/forest-stream-in-the-sunlight-529/\" target=\"_blank\" rel=\"noreferrer\">MixKit</a>\n        </code>\n      </div>\n\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}